name: 应用构建

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write

env:
  FLUTTER_VERSION: '3.35.3'

jobs:
  # 构建所有平台
  build-all:
    name: Build All Platforms
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: android
            artifact: android-apk
            path: build/app/outputs/flutter-apk/app-release.apk
          - os: ubuntu-latest
            platform: web
            artifact: web-app
            path: build/web
          - os: macos-latest
            platform: ios
            artifact: ios-app
            path: build/ios/iphoneos/Runner.app
          - os: macos-latest
            platform: macos
            artifact: macos-app
            path: build/macos/Build/Products/Release
          - os: windows-latest
            platform: windows
            artifact: windows-app
            path: build/windows/x64/runner/Release
          - os: ubuntu-latest
            platform: linux
            artifact: linux-app
            path: build/linux/x64/release/bundle

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java (Android only)
        if: matrix.platform == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
          # 安装 GStreamer 依赖（audioplayers 插件需要）
          sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
          # 安装其他可能需要的音频依赖
          sudo apt-get install -y libasound2-dev libpulse-dev

      - name: Build Android
        if: matrix.platform == 'android'
        run: flutter build apk --release

      - name: Build Web
        if: matrix.platform == 'web'
        run: flutter build web --release

      - name: Build iOS
        if: matrix.platform == 'ios'
        run: flutter build ios --release --no-codesign

      - name: Build macOS
        if: matrix.platform == 'macos'
        run: flutter build macos --release

      - name: Build Windows
        if: matrix.platform == 'windows'
        run: flutter build windows --release

      - name: Build Linux
        if: matrix.platform == 'linux'
        run: flutter build linux --release

      - name: Check build output exists
        shell: bash
        run: |
          echo "=== 检查构建输出 ==="
          echo "平台: ${{ matrix.platform }}"
          echo "预期路径: ${{ matrix.path }}"
          if [ -f "${{ matrix.path }}" ] || [ -d "${{ matrix.path }}" ]; then
            echo "✅ 构建输出存在"
            ls -la "${{ matrix.path }}"
          else
            echo "❌ 构建输出不存在"
            echo "当前目录结构:"
            find build -type d -name "*" | head -20
            echo "查找可能的输出文件:"
            find build -name "*.exe" -o -name "*.app" -o -name "*.apk" -o -name "*.dmg" | head -10
            
            # 对于Windows，尝试查找其他可能的路径
            if [ "${{ matrix.platform }}" = "windows" ]; then
              echo "=== Windows 特殊检查 ==="
              echo "检查 build/windows/ 目录:"
              ls -la build/windows/ 2>/dev/null || echo "build/windows/ 不存在"
              echo "查找所有 .exe 文件:"
              find build -name "*.exe" 2>/dev/null || echo "未找到 .exe 文件"
            fi
          fi

      - name: Prepare artifacts
        shell: bash
        run: |
          echo "=== 准备制品 ==="
          echo "平台: ${{ matrix.platform }}"
          echo "构建路径: ${{ matrix.path }}"
          
          # 根据平台处理不同的文件
          case "${{ matrix.platform }}" in
            "android")
              if [ -f "${{ matrix.path }}" ]; then
                echo "✅ Android APK 构建完成: ${{ matrix.path }}"
              else
                echo "❌ Android APK 构建失败: ${{ matrix.path }} 不存在"
              fi
              ;;
            "web")
              if [ -d "${{ matrix.path }}" ]; then
                echo "✅ Web 应用构建完成: ${{ matrix.path }}"
              else
                echo "❌ Web 应用构建失败: ${{ matrix.path }} 不存在"
              fi
              ;;
            "ios")
              if [ -d "${{ matrix.path }}" ]; then
                echo "✅ iOS 应用构建完成: ${{ matrix.path }}"
              else
                echo "❌ iOS 应用构建失败: ${{ matrix.path }} 不存在"
              fi
              ;;
            "macos")
              if [ -d "${{ matrix.path }}" ]; then
                echo "✅ macOS 应用构建完成: ${{ matrix.path }}"
              else
                echo "❌ macOS 应用构建失败: ${{ matrix.path }} 不存在"
              fi
              ;;
            "windows")
              if [ -d "${{ matrix.path }}" ]; then
                echo "✅ Windows 应用构建完成: ${{ matrix.path }}"
              else
                echo "❌ Windows 应用构建失败: ${{ matrix.path }} 不存在"
              fi
              ;;
            "linux")
              if [ -d "${{ matrix.path }}" ]; then
                echo "✅ Linux 应用构建完成: ${{ matrix.path }}"
              else
                echo "❌ Linux 应用构建失败: ${{ matrix.path }} 不存在"
              fi
              ;;
          esac

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.path }}
          if-no-files-found: warn

  # 创建GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List downloaded artifacts
        shell: bash
        run: |
          echo "=== 下载的 artifacts 结构 ==="
          find . -type f -name "*.apk" -o -name "*.app" -o -name "*.exe" -o -name "*.deb" -o -name "*.tar.gz" | head -20
          echo "=== 各平台文件 ==="
          ls -la android-apk/ 2>/dev/null || echo "Android APK 不存在"
          ls -la web-app/ 2>/dev/null || echo "Web 应用不存在"
          ls -la ios-app/ 2>/dev/null || echo "iOS 应用不存在"
          ls -la macos-app/ 2>/dev/null || echo "macOS 应用不存在"
          ls -la windows-app/ 2>/dev/null || echo "Windows 应用不存在"
          ls -la linux-app/ 2>/dev/null || echo "Linux 应用不存在"

      - name: Prepare release files
        shell: bash
        run: |
          echo "=== 准备 Release 文件 ==="
          VERSION="${{ github.event.inputs.version }}"
          echo "版本号: $VERSION"
          
          # 创建 release 目录
          mkdir -p release-files
          
          # Android: 直接复制 APK 文件
          if [ -f "android-apk/app-release.apk" ]; then
            cp "android-apk/app-release.apk" "release-files/kiri-${VERSION}.apk"
            echo "✅ 准备 Android APK: kiri-${VERSION}.apk"
          fi
          
          # Web: 创建压缩包
          if [ -d "web-app" ]; then
            cd web-app
            zip -r "../release-files/kiri-${VERSION}-web.zip" .
            cd ..
            echo "✅ 准备 Web 压缩包: kiri-${VERSION}-web.zip"
          fi
          
          # iOS: 创建 IPA 文件（从 .app 目录）
          if [ -d "ios-app" ]; then
            # 查找 .app 文件
            APP_FILE=$(find ios-app -name "*.app" | head -1)
            if [ -n "$APP_FILE" ]; then
              # 创建 Payload 目录并复制 .app 文件
              mkdir -p Payload
              cp -r "$APP_FILE" Payload/
              # 创建 IPA 文件
              zip -r "release-files/kiri-${VERSION}.ipa" Payload/
              rm -rf Payload
              echo "✅ 准备 iOS IPA: kiri-${VERSION}.ipa"
            fi
          fi
          
          # macOS: 创建压缩包（因为 hdiutil 在 GitHub Actions 中可能不可用）
          if [ -d "macos-app" ]; then
            # 查找 .app 文件
            APP_FILE=$(find macos-app -name "*.app" | head -1)
            if [ -n "$APP_FILE" ]; then
              # 创建压缩包
              cd macos-app
              zip -r "../release-files/kiri-${VERSION}-macos.zip" .
              cd ..
              echo "✅ 准备 macOS 压缩包: kiri-${VERSION}-macos.zip"
            fi
          fi
          
          # Windows: 直接复制 EXE 文件
          if [ -d "windows-app" ]; then
            EXE_FILE=$(find windows-app -name "*.exe" | head -1)
            if [ -n "$EXE_FILE" ]; then
              cp "$EXE_FILE" "release-files/kiri-${VERSION}.exe"
              echo "✅ 准备 Windows EXE: kiri-${VERSION}.exe"
            fi
          fi
          
          # Linux: 创建压缩包
          if [ -d "linux-app" ]; then
            cd linux-app
            tar -czf "../release-files/kiri-${VERSION}-linux.tar.gz" .
            cd ..
            echo "✅ 准备 Linux 压缩包: kiri-${VERSION}-linux.tar.gz"
          fi
          
          echo "=== Release 文件列表 ==="
          ls -la release-files/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: kiri ${{ github.event.inputs.version }}
          body: |
            ## 🎉 刻 | kiri ${{ github.event.inputs.version }}
            
            ### ✨ 功能特性
            - 禅意极简设计
            - 可自定义工作时间和休息时间
            - 跨平台支持
            - 直观的进度指示器
            - 智能状态切换
            
            ### 📦 下载
            - **Android APK**: `kiri-${VERSION}.apk` - 适用于Android设备
            - **Web应用**: `kiri-${VERSION}-web.zip` - 适用于Web浏览器
            - **iOS应用**: `kiri-${VERSION}.ipa` - 适用于iOS设备（需要开发者证书）
            - **macOS应用**: `kiri-${VERSION}-macos.zip` - 适用于macOS系统（Intel和Apple Silicon）
            - **Windows应用**: `kiri-${VERSION}.exe` - 适用于Windows系统
            - **Linux应用**: `kiri-${VERSION}-linux.tar.gz` - 适用于Linux系统
            
            ### 🚀 安装说明
            1. **Android**: 下载 `kiri-${VERSION}.apk` 文件并安装
            2. **Web**: 下载 `kiri-${VERSION}-web.zip`，解压后在浏览器中打开 `index.html`
            3. **iOS**: 下载 `kiri-${VERSION}.ipa`，通过 Xcode 安装到设备（需要开发者证书）
            4. **macOS**: 下载 `kiri-${VERSION}-macos.zip`，解压后运行
            5. **Windows**: 下载 `kiri-${VERSION}.exe` 文件直接运行
            6. **Linux**: 下载 `kiri-${VERSION}-linux.tar.gz`，解压后运行
            
            ### 📱 系统要求
            - **Android**: 5.0+ (API 21+)
            - **Web**: Chrome 60+, Firefox 55+, Safari 12+, Edge 79+
            - **iOS**: 12.0+ (需要开发者证书)
            - **macOS**: 10.14+
            - **Windows**: Windows 10+
            - **Linux**: Ubuntu 18.04+
            
            ### 🔧 技术栈
            - Flutter 3.35.3
            - Dart 3.0
            - Material Design 3
            
            ---
            
            *"时间不是敌人，而是朋友。每一刻都是新的开始。"*
          files: |
            release-files/*.apk
            release-files/*.zip
            release-files/*.ipa
            release-files/*.dmg
            release-files/*.exe
            release-files/*.tar.gz
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          fail_on_unmatched_files: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
